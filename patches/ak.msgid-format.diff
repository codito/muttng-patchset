port of the msgid_format option from mutt-ng.

From:  <>


Index: mutt-1.5.18/globals.h
===================================================================
--- mutt-1.5.18.orig/globals.h	2008-05-18 23:45:09.000000000 +0200
+++ mutt-1.5.18/globals.h	2008-05-18 23:45:44.000000000 +0200
@@ -82,6 +82,7 @@
 WHERE char *MhReplied;
 WHERE char *MhUnseen;
 WHERE char *MsgFmt;
+WHERE char *MsgIdFormat;
 
 #ifdef USE_SOCKET
 WHERE char *Preconnect INITVAL (NULL);
Index: mutt-1.5.18/init.h
===================================================================
--- mutt-1.5.18.orig/init.h	2008-05-18 23:45:23.000000000 +0200
+++ mutt-1.5.18/init.h	2008-05-18 23:45:44.000000000 +0200
@@ -1443,8 +1443,37 @@
   ** .pp
   ** This is the string displayed in the ``attachment'' menu for
   ** attachments of type message/rfc822.  For a full listing of defined
-  ** printf()-like sequences see the section on ``$$index_format''.
   */
+  {"msgid_format", DT_STR, R_NONE, UL &MsgIdFormat, UL "%Y%m%d%h%M%s.G%P%p"},
+  /*
+   ** .pp
+   ** This is the format for the ``local part'' of the \fTMessage-ID:\fP header
+   ** field generated by Mutt-ng. If this variable is empty, no \fTMessage-ID:\fP
+   ** headers will be generated. The '%'
+   ** character marks that certain data will be added to the string, similar to
+   ** \fTprintf(3)\fP. The following characters are allowed:
+   ** .pp
+   ** .dl
+   ** .dt %d .dd the current day of month
+   ** .dt %h .dd the current hour
+   ** .dt %m .dd the current month
+   ** .dt %M .dd the current minute
+   ** .dt %O .dd the current UNIX timestamp (octal)
+   ** .dt %p .dd the process ID
+   ** .dt %P .dd the current Message-ID prefix (a character rotating with 
+   **            every Message-ID being generated)
+   ** .dt %r .dd a random integer value (decimal)
+   ** .dt %R .dd a random integer value (hexadecimal)
+   ** .dt %s .dd the current second
+   ** .dt %T .dd the current UNIX timestamp (decimal)
+   ** .dt %X .dd the current UNIX timestamp (hexadecimal)
+   ** .dt %Y .dd the current year (Y2K compliant)
+   ** .dt %% .dd the '%' character
+   ** .de
+   ** .pp
+   ** \fBNote:\fP Please only change this setting if you know what you are doing.
+   ** Also make sure to consult RFC2822 to produce technically \fIvalid\fP strings.
+   */
   { "msg_format",	DT_SYN,  R_NONE, UL "message_format", 0 },
   /*
   */
Index: mutt-1.5.18/sendlib.c
===================================================================
--- mutt-1.5.18.orig/sendlib.c	2008-05-18 23:42:31.000000000 +0200
+++ mutt-1.5.18/sendlib.c	2008-05-18 23:45:44.000000000 +0200
@@ -1970,22 +1970,118 @@
   return p;
 }
 
-char *mutt_gen_msgid (void)
+static inline char mutt_normalized_char (char c)
+{
+  if (isalnum (c))
+    return c;
+  if (strchr (".!#$%&'*+-/=?^_`{|}~", c))
+    return c;
+  return '.';                   /* normalized character (we're stricter than RFC2822, 3.6.4) */
+}
+
+
+static void mutt_gen_localpart (char *buf, unsigned int len, char *fmt)
 {
-  char buf[SHORT_STRING];
   time_t now;
   struct tm *tm;
-  const char *fqdn;
+  char tmp[SHORT_STRING];
+
+  *buf = '\0';
 
   now = time (NULL);
   tm = gmtime (&now);
+
+  for (; *fmt; ++fmt) {
+    if (*fmt == '%') {
+      switch (fmt[1]) {
+      case 0:
+        return;
+      case 'd':
+        snprintf (tmp, sizeof (tmp), "%02d", tm->tm_mday);
+        safe_strncat (buf, len, tmp, 2);
+       break;
+      case 'h':
+        snprintf (tmp, sizeof (tmp), "%02d", tm->tm_hour);
+        safe_strncat (buf, len, tmp, 2);
+        break;
+      case 'm':
+        snprintf (tmp, sizeof (tmp), "%02d", tm->tm_mon + 1);
+        safe_strncat (buf, len, tmp, 2);
+        break;
+      case 'M':
+        snprintf (tmp, sizeof (tmp), "%02d", tm->tm_min);
+        safe_strncat (buf, len, tmp, 2);
+        break;
+      case 'O':
+        snprintf (tmp, sizeof (tmp), "%lo", (unsigned long) now);
+        safe_strncat (buf, len, tmp, strlen (tmp));
+        break;
+      case 'p':
+        snprintf (tmp, sizeof (tmp), "%u", (unsigned int) getpid ());
+        safe_strncat (buf, len, tmp, strlen (tmp));
+        break;
+      case 'P':
+        snprintf (tmp, sizeof (tmp), "%c", MsgIdPfx);
+        MsgIdPfx = (MsgIdPfx == 'Z') ? 'A' : MsgIdPfx + 1;
+        safe_strncat (buf, len, tmp, 1);
+        break;
+      case 'r':
+        snprintf (tmp, sizeof (tmp), "%u", (unsigned int) rand ());
+        safe_strncat (buf, len, tmp, strlen (tmp));
+        break;
+      case 'R':
+        snprintf (tmp, sizeof (tmp), "%x", (unsigned int) rand ());
+        safe_strncat (buf, len, tmp, strlen (tmp));
+        break;
+      case 's':
+        snprintf (tmp, sizeof (tmp), "%02d", tm->tm_sec);
+        safe_strncat (buf, len, tmp, 2);
+        break;
+      case 'T':
+        snprintf (tmp, sizeof (tmp), "%u", (unsigned int) now);
+        safe_strncat (buf, len, tmp, strlen (tmp));
+        break;
+      case 'X':
+        snprintf (tmp, sizeof (tmp), "%x", (unsigned int) now);
+        safe_strncat (buf, len, tmp, strlen (tmp));
+        break;
+      case 'Y':
+        snprintf (tmp, sizeof (tmp), "%04d", tm->tm_year + 1900);       /* this will break in the year 10000 ;-) */
+        safe_strncat (buf, len, tmp, 4);
+        break;
+      case '%':
+        safe_strncat (buf, len, "%", 1);
+        break;
+      default:
+        safe_strncat (buf, len, ".", 1);        /* invalid formats are replaced by '.' */
+      }                         /* switch */
+      ++fmt;
+    }
+    else {
+      char c;
+
+      c = mutt_normalized_char (*fmt);  /* @todo: filter out invalid characters */
+      safe_strncat (buf, len, &c, 1);
+    }
+  }
+}
+
+
+char *mutt_gen_msgid (void)
+{
+  char buf[SHORT_STRING];
+  char localpart[SHORT_STRING];
+  unsigned int localpart_length;
+  const char *fqdn;
+
   if(!(fqdn = mutt_fqdn(0)))
     fqdn = NONULL(Hostname);
 
-  snprintf (buf, sizeof (buf), "<%d%02d%02d%02d%02d%02d.G%c%u@%s>",
-	    tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour,
-	    tm->tm_min, tm->tm_sec, MsgIdPfx, (unsigned int)getpid (), fqdn);
-  MsgIdPfx = (MsgIdPfx == 'Z') ? 'A' : MsgIdPfx + 1;
+  localpart_length = sizeof (buf) - strlen (fqdn) - 4;  /* the 4 characters are '<', '@', '>' and '\0' */
+
+  mutt_gen_localpart (localpart, localpart_length, MsgIdFormat);
+
+  snprintf (buf, sizeof (buf), "<%s@%s>", localpart, fqdn);
   return (safe_strdup (buf));
 }
 
@@ -2393,7 +2489,7 @@
 
     mutt_set_followup_to (env);
 
-    if (!env->message_id)
+    if (!env->message_id && MsgIdFormat && *MsgIdFormat)
       env->message_id = mutt_gen_msgid ();
   }
 
@@ -2469,7 +2565,8 @@
     fseeko (fp, h->offset, 0);
     fprintf (f, "Resent-From: %s", resent_from);
     fprintf (f, "\nResent-%s", mutt_make_date (date, sizeof(date)));
-    fprintf (f, "Resent-Message-ID: %s\n", mutt_gen_msgid());
+    if (MsgIdFormat && *MsgIdFormat)
+      fprintf (f, "Resent-Message-ID: %s\n", mutt_gen_msgid());
     fputs ("Resent-To: ", f);
     mutt_write_address_list (to, f, 11, 0);
     mutt_copy_header (fp, h, f, ch_flags, NULL);
Index: mutt-1.5.18/PATCHES
===================================================================
--- mutt-1.5.18.orig/PATCHES	2008-05-18 23:45:41.000000000 +0200
+++ mutt-1.5.18/PATCHES	2008-05-18 23:45:44.000000000 +0200
@@ -1,3 +1,4 @@
+ak.msgid-format
 ak.rfc2047-fix
 patch-1.5.13.pdmef.last-folder.1
 patch-1.5.13.pdmef.ipv6addr.1
