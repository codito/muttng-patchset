diff --git a/PATCHES b/PATCHES
index e69de29..14fe90c 100644
Index: mutt-1.5.18/PATCHES
===================================================================
--- mutt-1.5.18.orig/PATCHES	2008-05-18 23:45:29.000000000 +0200
+++ mutt-1.5.18/PATCHES	2008-05-18 23:45:35.000000000 +0200
@@ -1,3 +1,4 @@
+patch-1.5.13.pdmef.last-folder.1
 patch-1.5.13.pdmef.ipv6addr.1
 patch-1.5.13.pdmef.foldername.1
 patch-1.5.13.pdmef.atoi.2
Index: mutt-1.5.18/enter.c
===================================================================
--- mutt-1.5.18.orig/enter.c	2008-01-30 05:26:50.000000000 +0100
+++ mutt-1.5.18/enter.c	2008-05-18 23:45:35.000000000 +0200
@@ -641,6 +641,13 @@
       /* use the raw keypress */
       ch = LastKey;
 
+      if ((ch == '#') && (flags & M_LASTFOLDER))
+      {
+        rv = 2;
+        my_wcstombs (buf, buflen, state->wbuf, state->lastchar);
+        goto bye;
+      }
+      
 #ifdef KEY_ENTER
       /* treat ENTER the same as RETURN */
       if (ch == KEY_ENTER)
Index: mutt-1.5.18/mutt.h
===================================================================
--- mutt-1.5.18.orig/mutt.h	2008-05-18 23:45:09.000000000 +0200
+++ mutt-1.5.18/mutt.h	2008-05-18 23:45:35.000000000 +0200
@@ -96,14 +96,15 @@
 #define CH_UPDATE_REFS	(1<<17) /* update References: */
 
 /* flags for mutt_enter_string() */
-#define  M_ALIAS   1      /* do alias "completion" by calling up the alias-menu */
-#define  M_FILE    (1<<1) /* do file completion */
-#define  M_EFILE   (1<<2) /* do file completion, plus incoming folders */
-#define  M_CMD     (1<<3) /* do completion on previous word */
-#define  M_PASS    (1<<4) /* password mode (no echo) */
-#define  M_CLEAR   (1<<5) /* clear input if printable character is pressed */
-#define  M_COMMAND (1<<6) /* do command completion */
-#define  M_PATTERN (1<<7) /* pattern mode - only used for history classes */
+#define  M_ALIAS	1      /* do alias "completion" by calling up the alias-menu */
+#define  M_FILE		(1<<1) /* do file completion */
+#define  M_EFILE	(1<<2) /* do file completion, plus incoming folders */
+#define  M_CMD		(1<<3) /* do completion on previous word */
+#define  M_PASS		(1<<4) /* password mode (no echo) */
+#define  M_CLEAR	(1<<5) /* clear input if printable character is pressed */
+#define  M_COMMAND	(1<<6) /* do command completion */
+#define  M_PATTERN	(1<<7) /* pattern mode - only used for history classes */
+#define  M_LASTFOLDER	(1<<8) /* last-folder mode - hack hack hack XXX */
 
 /* flags for mutt_get_token() */
 #define M_TOKEN_EQUAL		1	/* treat '=' as a special */
Index: mutt-1.5.18/recvattach.c
===================================================================
--- mutt-1.5.18.orig/recvattach.c	2008-05-18 23:42:31.000000000 +0200
+++ mutt-1.5.18/recvattach.c	2008-05-18 23:45:35.000000000 +0200
@@ -42,6 +42,7 @@
 #include <errno.h>
 
 static const char *Mailbox_is_read_only = N_("Mailbox is read-only.");
+static char LastSaveFolder[_POSIX_PATH_MAX] = "";
 
 #define CHECK_READONLY if (Context->readonly) \
 {\
@@ -59,6 +60,22 @@
   { NULL }
 };
 
+static void mutt_extract_path (char *src, char *dst, size_t dstlen)
+{
+  char *p;
+  size_t len;
+
+  if (src && (p = strrchr (src, '/')))
+  {
+    len = p-src;
+    if (len >= dstlen)	/* leave room for \0 */
+      len = dstlen - 1;
+    memcpy (dst, src, len);
+    dst[len] = '\0';
+  } else if (dst && dstlen)
+    dst[0] = '\0';
+}
+
 void mutt_update_tree (ATTACHPTR **idx, short idxlen)
 {
   char buf[STRING];
@@ -411,6 +428,7 @@
   int is_message;
   int append = 0;
   int rc;
+  int ret = -1;
   
   if (body->filename) 
   {
@@ -429,13 +447,26 @@
 
   prepend_curdir (buf, sizeof (buf));
 
-  prompt = _("Save to file: ");
+  prompt = _("Save to file ('#' for last used folder): ");
   while (prompt)
   {
-    if (mutt_get_field (prompt, buf, sizeof (buf), M_FILE | M_CLEAR) != 0
-	|| !buf[0])
+    ret = mutt_get_field (prompt, buf, sizeof (buf), M_FILE | M_CLEAR | M_LASTFOLDER);
+    if (((ret != 0) && (ret != 2)) || (!buf[0] && ret != 2))
       return -1;
-    
+
+    if (ret == 2)
+    {
+      char tmpbuf[_POSIX_PATH_MAX];
+      snprintf (tmpbuf, sizeof(tmpbuf), "%s%s%s", NONULL (LastSaveFolder), 
+		LastSaveFolder[0] ? "/" : "", buf);
+      strfcpy (buf, tmpbuf, sizeof (buf));
+      ret = mutt_get_field (_("Save to file: "), buf, sizeof (buf), M_FILE);
+      if ((ret != 0) || (!buf[0]))
+        return -1;
+    }
+    else
+      mutt_extract_path (buf, LastSaveFolder, sizeof (LastSaveFolder));
+
     prompt = NULL;
     mutt_expand_path (buf, sizeof (buf));
     
