diff --git a/PATCHES b/PATCHES
index e69de29..a22d070 100644
Index: mutt-1.5.18/PATCHES
===================================================================
--- mutt-1.5.18.orig/PATCHES	2008-05-18 23:43:59.000000000 +0200
+++ mutt-1.5.18/PATCHES	2008-05-18 23:44:05.000000000 +0200
@@ -1,2 +1,3 @@
+patch-1.5.13.cd.ifdef.1
 patch-1.5.9.aw.listreply.1
 vvv.nntp
Index: mutt-1.5.18/doc/manual.xml.head
===================================================================
--- mutt-1.5.18.orig/doc/manual.xml.head	2008-05-18 23:42:30.000000000 +0200
+++ mutt-1.5.18/doc/manual.xml.head	2008-05-18 23:44:05.000000000 +0200
@@ -3331,6 +3331,29 @@
 
 </sect1>
 
+<sect1 id="ifdef">
+<title>Configuring features conditionnaly</title>
+
+<para>
+Usage: <literal>ifdef</literal> <emphasis>item</emphasis> <emphasis>command</emphasis>
+</para>
+
+<para>
+This command allows to test if a feature has been compiled in, before
+actually executing the command. Item can be either the name of a
+function or a variable.
+</para>
+
+<para>
+Example:
+</para>
+
+<screen>
+ifdef imap_keepalive 'source ~/.mutt/imap_setup'
+</screen>
+
+</sect1>
+
 <sect1 id="unhook">
 <title>Removing hooks</title>
 
Index: mutt-1.5.18/init.c
===================================================================
--- mutt-1.5.18.orig/init.c	2008-05-18 23:42:30.000000000 +0200
+++ mutt-1.5.18/init.c	2008-05-18 23:44:05.000000000 +0200
@@ -634,6 +634,52 @@
   return (rv);
 }
 
+static int parse_ifdef (BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
+{
+  int i, j, res = 0;
+  BUFFER token;
+
+  memset (&token, 0, sizeof (token));
+  mutt_extract_token (tmp, s, 0);
+
+  /* is the item defined as a variable or a function? */
+  if (!(res = (mutt_option_index (tmp->data) != -1)))
+    for (i = 0; !res && i < MENU_MAX; i++)
+    {
+      struct binding_t *b = km_get_table (Menus[i].value);
+
+      if (!b)
+	continue;
+
+      for (j = 0; b[j].name; j++)
+	if (!ascii_strncasecmp (tmp->data, b[j].name, mutt_strlen (tmp->data))
+	      && (mutt_strlen (b[j].name) == mutt_strlen (tmp->data)))
+	{
+	  res = 1;
+	  break;
+	}
+    }
+
+  if (!MoreArgs (s))
+  {
+    snprintf (err->data, err->dsize, _("ifdef: too few arguments"));
+    return (-1);
+  }
+  mutt_extract_token (tmp, s, M_TOKEN_SPACE);
+
+  if (res)
+  {
+    if (mutt_parse_rc_line (tmp->data, &token, err) == -1)
+    {
+      mutt_error ("Erreur: %s", err->data);
+      FREE (&token.data);
+      return (-1);
+    }
+    FREE (&token.data);
+  }
+  return 0;
+}
+
 static int parse_unignore (BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
 {
   do
Index: mutt-1.5.18/init.h
===================================================================
--- mutt-1.5.18.orig/init.h	2008-05-18 23:43:59.000000000 +0200
+++ mutt-1.5.18/init.h	2008-05-18 23:44:05.000000000 +0200
@@ -3372,6 +3372,7 @@
 static int parse_unlists (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_alias (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_unalias (BUFFER *, BUFFER *, unsigned long, BUFFER *);
+static int parse_ifdef (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_ignore (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_unignore (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_source (BUFFER *, BUFFER *, unsigned long, BUFFER *);
@@ -3423,6 +3424,7 @@
   { "group",		parse_group,		0 },
   { "ungroup",		parse_ungroup,		0 },
   { "hdr_order",	parse_list,		UL &HeaderOrderList },
+  { "ifdef",		parse_ifdef,		0 },
 #ifdef HAVE_ICONV
   { "iconv-hook",	mutt_parse_hook,	M_ICONVHOOK }, 
 #endif
